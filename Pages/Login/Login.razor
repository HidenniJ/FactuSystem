@page "/login"
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using FactuSystem.Authentication
@using FactuSystem.Data.Model
@inject AuthenticationStateProvider authStateProvider
@inject IUsuarioServices usuarioservices


<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8">
  <title>CodePen - Finance Mobile Application-UX/UI Design Screen One</title>
 
<link rel='stylesheet' href='https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&amp;display=swap'><link rel="stylesheet" href="./style.css">

</head>
<body>
<!-- partial:index.partial.html -->
<div class="screen-1">
        <img class="logo" src="PHOTO-2024-01-19-19-59-28.jpg">

        <div class="email">
    <label for="email">Correo electronico</label>
    <div class="sec-2">
      <ion-icon name="mail-outline"></ion-icon>
                <input type="email" name="email" @bind="model.UserName" placeholder="Correo@gmail.com" />
    </div>
  </div>
  <div class="password">
    <label for="password">Contraseña</label>
    <div class="sec-2">
      <ion-icon name="lock-closed-outline"></ion-icon>
                <input class="pas" type="password" @bind="model.Password" name="password" placeholder="············" />
                <ion-icon class="show-hide" @onclick="async () => { await Mostrarpassword(); }" name="eye-outline"></ion-icon>
    </div>
  </div>
        <button class="login" @onclick="Authenticate">Login </button>
        @if (!string.IsNullOrEmpty(mensajeError))
        {
            <div class="text-danger mb-3">@mensajeError</div>
        }
        <div id="spinner" style="display: none;">
            <!-- Aquí puedes agregar el código HTML de tu spinner -->
            <i class="fa fa-spinner fa-spin"></i> Cargando...
        </div>

        <div class="footer"><span>HDC Factusystem</span><span>Acerca de</span></div>
</div>
<!-- partial -->
  <style>

        {
            font-family: "Poppins";
        }

        body {
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            overflow-y: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            background: #dde5f4;
            height: 100vh;
        }

        .screen-1 {
            background: #f1f7fe;
            padding: 2em;
            display: flex;
            flex-direction: column;
            border-radius: 30px;
            box-shadow: 0 0 2em #e6e9f9;
            gap: 2em;
            align-items: center; /* Centra los elementos horizontalmente */
        }

            .screen-1 .logo {
                width: 100px; /* Ajusta el tamaño del logo según sea necesario */
                height: 100px; /* Ajusta el tamaño del logo según sea necesario */
                border-radius: 50%; /* Hace que la imagen sea redonda */
                margin-bottom: 2em; /* Agrega margen inferior */
            }

            .screen-1 .email {
                background: white;
                box-shadow: 0 0 2em #e6e9f9;
                padding: 1em;
                display: flex;
                flex-direction: column;
                gap: 0.5em;
                border-radius: 20px;
                color: #4d4d4d;
                margin-top: -3em;
            }

            .screen-1 .logo {
                width: 130px; /* Ajusta el tamaño del logo según sea necesario */
                height: 130px; /* Ajusta el tamaño del logo según sea necesario */
                border-radius: 50%; /* Hace que la imagen sea redonda */
                margin-bottom: 5em; /* Agrega margen inferior */

            }

            .screen-1 .email,
            .screen-1 .password {
                width: 100%; /* Ajusta el ancho de los campos de entrada */
                max-width: 300px; /* Define el ancho máximo de los campos de entrada */
            }

            .screen-1 .email,
            .screen-1 .password,
            .screen-1 .login,
            .screen-1 .footer {
                margin-bottom: 1em; /* Agrega margen inferior entre los elementos */
            }
                .screen-1 .email input {
                    outline: none;
                    border: none;
                }

                    .screen-1 .email input::-moz-placeholder {
                        color: black;
                        font-size: 0.9em;
                    }

                    .screen-1 .email input:-ms-input-placeholder {
                        color: black;
                        font-size: 0.9em;
                    }

                    .screen-1 .email input::placeholder {
                        color: black;
                        font-size: 0.9em;
                    }

                .screen-1 .email ion-icon {
                    color: #4d4d4d;
                    margin-bottom: -0.2em;
                }

            .screen-1 .password {
                background: white;
                box-shadow: 0 0 2em #e6e9f9;
                padding: 1em;
                display: flex;
                flex-direction: column;
                gap: 0.5em;
                border-radius: 20px;
                color: #4d4d4d;
            }

                .screen-1 .password input {
                    outline: none;
                    border: none;
                }

                    .screen-1 .password input::-moz-placeholder {
                        color: black;
                        font-size: 0.9em;
                    }

                    .screen-1 .password input:-ms-input-placeholder {
                        color: black;
                        font-size: 0.9em;
                    }

                    .screen-1 .password input::placeholder {
                        color: black;
                        font-size: 0.9em;
                    }

                .screen-1 .password ion-icon {
                    color: #4d4d4d;
                    margin-bottom: -0.2em;
                }

                .screen-1 .password .show-hide {
                    margin-right: -5em;
                }

            .screen-1 .login {
                padding: 1em;
                background: #3e4684;
                color: white;
                border: none;
                border-radius: 30px;
                font-weight: 600;
            }

            .screen-1 .footer {
                display: flex;
                font-size: 0.7em;
                color: #5e5e5e;
                gap: 14em;
                padding-bottom: 10em;
            }

                .screen-1 .footer span {
                    cursor: pointer;
                }

        button {
            cursor: pointer;
        }

        .screen-1 .login {
            width: 100%; /* Hace que el botón de inicio de sesión ocupe todo el ancho disponible */
            padding: 1em; /* Ajusta el relleno del botón */
            background: #3e4684;
            color: white;
            border: none;
            border-radius: 30px;
            font-weight: 600;
        }

   

  </style>
</body>
</html>

@code{
    private async Task Mostrarpassword()
    {
        await JSRuntime.InvokeVoidAsync("togglePasswordVisibility");


    }
    protected override async Task OnInitializedAsync()
    {
        // Llamada a CrearUsuarioAdmin antes de intentar autenticar
        await usuarioServices.CrearUsuarioAdmin();

        // Resto de tu código OnInitializedAsync
    }
    private string mensajeError = "";
    private LoginModel model = new LoginModel();

    private class LoginModel
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }

    private async Task Authenticate()
    {
        if (string.IsNullOrWhiteSpace(model.UserName) || string.IsNullOrWhiteSpace(model.Password))
        {
            mensajeError = "Por favor, complete todos los campos.";
        }
        else
        {
            // Esperar a que la tarea se complete y obtener el usuario resultante
            Usuario user = await usuarioservices.Autenticar(model.UserName, model.Password);

            // Verificar si el usuario es nulo
            if (user == null)
            {
                mensajeError = "Credenciales incorrectas.";
            }
            else
            {
                // Autenticación exitosa, realizar las acciones necesarias (actualizar estado de autenticación, redireccionar, etc.)
                var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                    {
                        UserName = user.Email,
                        Name = user.Nombre + " " + user.Apellidos,
                        Role = user.Role
                    });
                await Animacion();
                urlHelper.NavigateTo("/paginaprincipal", true);
            }
        }
    }



    private async Task Animacion()
    {
        // Mostrar el spinner
        await JSRuntime.InvokeVoidAsync("eval", @"document.getElementById('spinner').style.display = 'block';");

        // Simular inicio de sesión (aquí debes realizar tu lógica de inicio de sesión)
        await Task.Delay(2000); // Simulación de inicio de sesión (2 segundos en este ejemplo)

        // Ocultar el spinner
        await JSRuntime.InvokeVoidAsync("eval", @"document.getElementById('spinner').style.display = 'none';");

        // Redirigir a la página principal
        NavigationManager.NavigateTo("/paginaprincipal", true);
    }

   
}



